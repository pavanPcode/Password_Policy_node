swagger: "2.0"
info:
  version: "1.0.0"
  title: "User Authentication API"
  description: "APIs for user registration and login with password policy checks"
basePath: "/"

consumes:
  - application/json
produces:
  - application/json
paths:
  /register:
    post:
      summary: "Register a new user"
      description: "Register a user after validating password against policy and storing secure info."
      tags:
        - auth
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
              - username
              - role
            properties:
              name:
                type: string
                example: "test12"
              username:
                type: string
                example: "ravi6@domain.com"
              role:
                type: integer
                example: 1
      responses:
        201:
          description: "User registered successfully."
        400:
          description: "Validation failed or email already exists."
        500:
          description: "Server error"

  /login:
    post:
      summary: "User Login"
      description: "Login user with account lock, expiry, and failed attempts logic."
      tags:
        - auth
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
                example: "ravi6@domain.com"
              password:
                type: string
                example: "Test@1234"
      responses:
        200:
          description: "Login successful."
        401:
          description: "Incorrect password"
        403:
          description: "Account locked or password expired"
        404:
          description: "User not found"
        500:
          description: "Login failed"
  /UserChangePassword:
    post:
      tags:
        - auth
      summary: Change user's password
      description: Change the user's password after validating the new password against the policy.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - username
              - new_password
              - old_password
            properties:
              username:
                type: string
                example: "ravi6@domain.com"
              new_password:
                type: string
                example: "Test@1234567"
              old_password:
                type: string
                example: "Test@1234567"
              PerformedBy:
                type: string
                description: ID of the person performing the action
                example: "5"
      responses:
        200:
          description: Password changed successfully
        400:
          description: Validation failed or weak password
        404:
          description: User not found
        500:
          description: Server error
  /adminChangePassword:
    post:
      tags:
        - auth
      summary: generate user's password to  TemporaryPassword
      description: generate the user's password after validating the new password against the policy.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - username
            properties:
              username:
                type: string
                example: "ravi6@domain.com"
              PerformedBy:
                type: string
                description: ID of the person performing the action
                example: "5"
      responses:
        200:
          description: Password generated successfully
        400:
          description: Validation failed 
        404:
          description: User not found
        500:
          description: Server error
  /updatepasswordPolicy:
    post:
      tags:
        - Password Policy
      summary: Update or create the password policy
      description: "If a policy exists, it will be updated. If not, a new one will be created."
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - MinLength
              - RequireUppercase
              - RequireLowercase
              - RequireDigit
              - RequireSpecialChar
              - ExpiryDays
              - MaxFailedAttempts
              - ReuseHistoryCount
              - LockoutDurationMinutes
              - sessionTimeoutMinutes
            properties:
              MinLength:
                type: integer
                example: 8
              RequireUppercase:
                type: integer
                enum: [0, 1]
                example: 1
              RequireLowercase:
                type: integer
                enum: [0, 1]
                example: 1
              RequireDigit:
                type: integer
                enum: [0, 1]
                example: 1
              RequireSpecialChar:
                type: integer
                enum: [0, 1]
                example: 1
              ExpiryDays:
                type: integer
                example: 75
              MaxFailedAttempts:
                type: integer
                example: 5
              ReuseHistoryCount:
                type: integer
                example: 5
              LockoutDurationMinutes:
                type: integer
                example: 15
              sessionTimeoutMinutes:
                type: integer
                example: 5
              PerformedBy:
                type: string
                description: ID of the person performing the action
                example: "5"
      responses:
        200:
          description: Password policy updated or created
        500:
          description: Server error
  /getPasswordPolicy:
    get:
      tags:
        - Password Policy
      summary: Get current password policy
      description: Retrieve the currently active password policy.
      parameters:
        - name: PerformedBy
          in: query
          required: false
          type: string
          description: ID of the person performing the action (defaults to '2' if not provided)
      responses:
        200:
          description: Current password policy returned
          schema:
            type: object
            properties:
              MinLength:
                type: integer
                example: 8
              RequireUppercase:
                type: integer
                example: 1
              RequireLowercase:
                type: integer
                example: 1
              RequireDigit:
                type: integer
                example: 1
              RequireSpecialChar:
                type: integer
                example: 1
              ExpiryDays:
                type: integer
                example: 75
              MaxFailedAttempts:
                type: integer
                example: 5
              ReuseHistoryCount:
                type: integer
                example: 5
              LockoutDurationMinutes:
                type: integer
                example: 15
        404:
          description: Policy not found
        500:
          description: Server error
  /addActivity:
    post:
      tags:
        - Activity
      summary: Insert user activity
      description: Logs a new activity record for the user.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ActivityType
              - PerformedBy
              - PerformedOn
            properties:
              ActivityType:
                type: integer
                example: 1
              PerformedBy:
                type: integer
                example: 2
              PerformedOn:
                type: string
                format: date-time
                example: "2025-07-01 15:36:06"
              Notes:
                type: string
                example: "tsgs"
              Location:
                type: string
                example: "login"
              IsSucces:
                type: bit
                example: 1
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /getActivities:
    get:
      tags:
        - Activity
      summary: Retrieve all activity logs
      description: Returns a list of all user activity logs sorted by PerformedOn in descending order.
      produces:
        - application/json
      responses:
        200:
          description: Successfully retrieved activity logs
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activities fetched successfully
              status:
                type: boolean
                example: true
              ResultData:
                type: array
                items:
                  type: object
                  properties:
                    ActivityType:
                      type: integer
                      example: 1
                    PerformedBy:
                      type: string
                      example: "admin"
                    PerformedOn:
                      type: string
                      format: date-time
                      example: "2025-07-03T16:32:00.000Z"
                    Notes:
                      type: string
                      example: Checked HVAC system
                    Location:
                      type: string
                      example: Server Room
        500:
          description: Failed to fetch activities
          schema:
            type: object
            properties:
              message:
                type: string
                example: Failed to fetch activities
              status:
                type: boolean
                example: false
              ResultData:
                type: array
                example: []
  /GetAHUMachines:
    get:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: PerformedBy
          in: query
          required: false
          type: string
          description: ID of the person performing the action (defaults to '2' if not provided)
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /AddAHUMachines:
    post:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              PerformedBy:
                type: string
                description: ID of the person performing the action (defaults to '2' if not provided)
                example: "5"
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /EditAHUMachines:
    post:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              PerformedBy:
                type: string
                description: ID of the person performing the action (defaults to '2' if not provided)
                example: "5"
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /DeleteAHUMachines:
    post:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              PerformedBy:
                type: string
                description: ID of the person performing the action (defaults to '2' if not provided)
                example: "5"
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /DeleteAHUFilters:
    post:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              PerformedBy:
                type: string
                description: ID of the person performing the action (defaults to '2' if not provided)
                example: "5"
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /EditAHUFilters:
    post:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              PerformedBy:
                type: string
                description: ID of the person performing the action (defaults to '2' if not provided)
                example: "5"
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /AddAHUFilters:
    post:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              PerformedBy:
                type: string
                description: ID of the person performing the action (defaults to '2' if not provided)
                example: "5"
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /GetAHUFilters:
    get:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: PerformedBy
          in: query
          required: false
          type: string
          description: ID of the person performing the action (defaults to '2' if not provided)
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /AHUFiltersUpdateStatus:
    post:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              PerformedBy:
                type: string
                description: ID of the person performing the action (defaults to '2' if not provided)
                example: "5"
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /AHUFilterGenerateBarcode:
    post:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              PerformedBy:
                type: string
                description: ID of the person performing the action (defaults to '2' if not provided)
                example: "5"
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /getNotifications:
    get:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: PerformedBy
          in: query
          required: false
          type: string
          description: ID of the person performing the action (defaults to '2' if not provided)
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /AuditTrial:
    get:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: PerformedBy
          in: query
          required: false
          type: string
          description: ID of the person performing the action (defaults to '2' if not provided)
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /getSchedule:
    get:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: PerformedBy
          in: query
          required: false
          type: string
          description: ID of the person performing the action (defaults to '2' if not provided)
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /getDeviationsAlarms:
    get:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: PerformedBy
          in: query
          required: false
          type: string
          description: ID of the person performing the action (defaults to '2' if not provided)
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /getReplacementList:
    get:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: PerformedBy
          in: query
          required: false
          type: string
          description: ID of the person performing the action (defaults to '2' if not provided)
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /getRetirementList:
    get:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: PerformedBy
          in: query
          required: false
          type: string
          description: ID of the person performing the action (defaults to '2' if not provided)
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /getUser:
    get:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: PerformedBy
          in: query
          required: false
          type: string
          description: ID of the person performing the action (defaults to '2' if not provided)
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /AddUser:
    post:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              PerformedBy:
                type: string
                description: ID of the person performing the action (defaults to '2' if not provided)
                example: "5"
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /EditUser:
    post:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              PerformedBy:
                type: string
                description: ID of the person performing the action (defaults to '2' if not provided)
                example: "5"
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /DeleteUser:
    post:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              PerformedBy:
                type: string
                description: ID of the person performing the action (defaults to '2' if not provided)
                example: "5"
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /getRolePermissions:
    get:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: PerformedBy
          in: query
          required: false
          type: string
          description: ID of the person performing the action (defaults to '2' if not provided)
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /getFilterTypes:
    get:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: PerformedBy
          in: query
          required: false
          type: string
          description: ID of the person performing the action (defaults to '2' if not provided)
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /addFilterTypes:
    post:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              PerformedBy:
                type: string
                description: ID of the person performing the action (defaults to '2' if not provided)
                example: "5"
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /editFilterTypes:
    post:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              PerformedBy:
                type: string
                description: ID of the person performing the action (defaults to '2' if not provided)
                example: "5"
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /deleteFilterTypes:
    post:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              PerformedBy:
                type: string
                description: ID of the person performing the action (defaults to '2' if not provided)
                example: "5"
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /getDashboard:
    get:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: PerformedBy
          in: query
          required: false
          type: string
          description: ID of the person performing the action (defaults to '2' if not provided)
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /getSidebar:
    get:
      tags:
        - ALL
      summary:  activity
      description: Logs .
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: PerformedBy
          in: query
          required: false
          type: string
          description: ID of the person performing the action (defaults to '2' if not provided)
      responses:
        200:
          description: Activity inserted successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Activity inserted successfully
              status:
                type: boolean
                example: true
        400:
          description: Missing required fields
        500:
          description: Failed to insert activity
  /api/AddAHUFilter:
    post:
      summary: "Add AHU Filter"
      description: "Adds a new AHU filter. FilterId, Barcode, and Lable are auto-generated."
      tags:
        - Filter
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - AHUId
              - Lable
              - AssetType
              - Manufacturer
              - InstalledOn
              - Location
              - Dimensions
              - MicronRating
              - CleaningLimit
              - LastCleaningDate
              - ValidOperationLife
              - CurrentStatus
              - AvailabilityStatus
              - Specifications
              - CreatedBy
            properties:
              AHUId:
                type: integer
                example: 2
              Lable:
                type: string
                example: "A100"
              AssetType:
                type: integer
                example: 2
              Manufacturer:
                type: string
                example: "Blue Star"
              InstalledOn:
                type: string
                format: date
                example: "2024-06-15"
              Location:
                type: integer
                example: 2
              Dimensions:
                type: string
                example: "24x12x2"
              MicronRating:
                type: string
                example: "10 Micron"
              CleaningLimit:
                type: string
                example: "5 cleanings"
              LastCleaningDate:
                type: string
                format: date
                example: "2024-07-01"
              ValidOperationLife:
                type: integer
                example: 365
              CurrentStatus:
                type: string
                example: "Active"
              AvailabilityStatus:
                type: string
                example: "Available"
              Specifications:
                type: string
                example: "HEPA filter"
              CreatedBy:
                type: integer
                example: 1001
      responses:
        200:
          description: "Asset item inserted successfully"
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Asset item inserted successfully"
        500:
          description: "Server error"
  /api/getAHUIds:
    get:
      summary: "Get AHU IDs"
      description: "Returns a list of AHU IDs from the system."
      tags:
        - Filter
      responses:
        200:
          description: "List of AHU IDs"
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: array
                items:
                  type: object
                  properties:
                    AHUId:
                      type: integer
                      example: 5
                    AHUName:
                      type: string
                      example: "AHU Block A"
        500:
          description: "Server error"
  /api/getFilterType:
    get:
      summary: "Get Filter Types"
      description: "Returns a list of available filter types"
      tags:
        - Filter
      responses:
        200:
          description: "List of filter types"
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: array
                items:
                  type: object
                  properties:
                    FilterTypeId:
                      type: integer
                      example: 1
                    FilterTypeName:
                      type: string
                      example: "HEPA Filter"
        500:
          description: "Server error"
  /api/getLocationType:
    get:
      summary: "Get Location Types"
      description: "Returns a list of location types"
      tags:
        - Filter
      responses:
        200:
          description: "List of location types"
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: array
                items:
                  type: object
                  properties:
                    LocationTypeId:
                      type: integer
                      example: 1
                    LocationTypeName:
                      type: string
                      example: "Plant Room"
        500:
          description: "Server error"
  /api/getFiltersList:
    get:
      summary: Get Filters List
      description: Returns a complete list of filters from the system based on optional filters.
      tags:
        - Filter
      produces:
        - application/json
      parameters:
        - name: BlockId
          in: query
          required: true
          type: integer
          description: ID of the block (use 0 for all blocks)
          example: 0
        - name: Status
          in: query
          required: true
          type: integer
          description: Status of the filter (use 0 for all statuses)
          example: 5
        - name: Barcode
          in: query
          required: true
          type: string
          description: Barcode of the filter (use 0 for all)
          example: "0"
      responses:
        200:
          description: Successful response with list of filters
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: array
                items:
                  type: object
                  properties:
                    FilterId:
                      type: string
                      example: "FLT123456"
                    AHUId:
                      type: integer
                      example: 5
                    Code:
                      type: string
                      example: "A100"
                    Manufacturer:
                      type: string
                      example: "Blue Star"
                    InstalledOn:
                      type: string
                      format: date
                      example: "2024-06-15"
                    Location:
                      type: string
                      example: "Bangalore Plant"
                    Barcode:
                      type: string
                      example: "12345678"
                    Status:
                      type: integer
                      example: 1
        500:
          description: Internal Server Error
  /api/CheckOrderedStage:
    post:
      summary: "Check and Update to Next Ordered Stage"
      description: >
        Checks the current stage of a filter by Barcode. If it's an ordered stage, 
        moves it to the next ordered stage and returns a success or failure message.
      tags:
        - Filter
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - BarcodeNum
              - OrderNum
              - PerformedBy
            properties:
              BarcodeNum:
                type: string
                description: Barcode of the filter
                example: "skjdh767"
              OrderNum:
                type: integer
                description: User's current known stage order
                example: 3
              PerformedBy:
                type: integer
                description: User ID who performed the action
                example: 3
      responses:
        200:
          description: Status of the transition to next ordered stage
          schema:
            type: object
            properties:
              UserGivenOrder:
                type: integer
                example: 3
              ResultMessage:
                type: string
                example: "Status updated to next ordered stage: 4"
              Status:
                type: string
                example: "true"
        500:
          description: Internal Server Error
  /api/UpdateFilterStatus:
    post:
      summary: "Add Filter History Entries (Bulk)"
      description: "Accepts an array of filter history records and inserts them one by one into the FilterHistory table."
      tags:
        - Filter
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: array
            items:
              type: object
              required:
                - FilterId
                - StageId
                - Status
                - performedBy
                - Barcode
              properties:
                FilterId:
                  type: integer
                  example: 102
                StageId:
                  type: integer
                  example: 3
                Remarks:
                  type: string
                  example: "Filter cleaned and dried"
                Status:
                  type: integer
                  example: 1
                washingEquipId:
                  type: integer
                  example: 5
                AirPressure:
                  type: string
                  example: "80 PSI"
                RoWaterPressure:
                  type: string
                  example: "60 PSI"
                Duration:
                  type: integer
                  example: 30
                DryerEquipId:
                  type: string
                  example: "DRY-01"
                DryerTemp:
                  type: string
                  example: "70°C"
                performedBy:
                  type: integer
                  example: 1001
                Barcode:
                  type: string
                  example: "BARCODE12345"
                WashingReasonId:
                  type: integer
                  example: 1001
      responses:
        200:
          description: "All filter history entries processed"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Processed all filter history entries"
              success:
                type: boolean
                example: true
              results:
                type: array
                items:
                  type: object
                  properties:
                    Barcode:
                      type: string
                      example: "BARCODE12345"
                    result:
                      type: object
                      properties:
                        Status:
                          type: boolean
                          example: true
                        message:
                          type: string
                          example: "Inserted successfully"
        500:
          description: "Internal Server Error"
  /api/GetFilterStatus:
    get:
      summary: "Get Filter History"
      description: "Fetches the complete maintenance history of a filter using its FilterId."
      tags:
        - Filter
      produces:
        - application/json
      parameters:
        - name: FilterId
          in: query
          type: integer
          description: ID of the filter to retrieve history for
          example: 101
      responses:
        200:
          description: "Successful response with filter history"
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: array
                items:
                  type: object
                  properties:
                    StageId:
                      type: integer
                      example: 3
                    Remarks:
                      type: string
                      example: "Filter cleaned and dried"
                    Status:
                      type: integer
                      example: 1
                    washingEquipId:
                      type: integer
                      example: 5
                    AirPressure:
                      type: string
                      example: "80 PSI"
                    RoWaterPressure:
                      type: string
                      example: "60 PSI"
                    Duration:
                      type: integer
                      example: 30
                    DryerEquipId:
                      type: string
                      example: "DRY-01"
                    DryerTemp:
                      type: string
                      example: "70°C"
                    CreatedOn:
                      type: string
                      format: date-time
                      example: "2025-07-04T15:30:00"
                    CreatedBy:
                      type: integer
                      example: 1001
                    Barcode:
                      type: string
                      example: "BARCODE12345"
        400:
          description: "FilterId is missing or invalid"
        500:
          description: "Internal Server Error"
  /api/GetMastersEquipment:
    get:
      summary: "Get Master Equipment List"
      description: "Returns the list of equipment based on whether it is a dryer or not."
      tags:
        - Master
      produces:
        - application/json
      parameters:
        - name: Isdryer
          in: query
          required: true
          type: integer
          description: "0 for non-dryer, 1 for dryer"
          example: 0
      responses:
        200:
          description: "List of equipment"
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: array
                items:
                  type: object
                  properties:
                    EquipmentId:
                      type: integer
                      example: 1
                    EquipmentName:
                      type: string
                      example: "Washer 3000"
                    IsDryer:
                      type: boolean
                      example: false
        400:
          description: "Missing or invalid query parameter"
        500:
          description: "Internal Server Error"
  /api/GetMastersReasons:
    get:
      summary: "Get Master Reasons"
      description: "Returns a list of reason masters based on the given type."
      tags:
        - Master
      produces:
        - application/json
      parameters:
        - name: Type
          in: query
          required: true
          type: integer
          description: "Type of reason to retrieve (e.g., 1 for washing reasons, 2 for drying reasons)"
          example: 1
      responses:
        200:
          description: "List of reasons fetched successfully"
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: array
                items:
                  type: object
                  properties:
                    ReasonId:
                      type: integer
                      example: 101
                    ReasonText:
                      type: string
                      example: "Filter damaged during wash"
                    Type:
                      type: integer
                      example: 1
        400:
          description: "Missing or invalid query parameter"
        500:
          description: "Internal Server Error"
  /api/GetMastersPressure:
    get:
      summary: "Get Master Pressure Settings"
      description: "Returns a list of master pressure configurations based on the specified type."
      tags:
        - Master
      produces:
        - application/json
      parameters:
        - name: Type
          in: query
          required: true
          type: integer
          description: "Type of pressure (e.g., 1 for Air, 2 for RO Water)"
          example: 1
      responses:
        200:
          description: "List of pressure settings fetched successfully"
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: array
                items:
                  type: object
                  properties:
                    PressureId:
                      type: integer
                      example: 201
                    PressureValue:
                      type: string
                      example: "80 PSI"
                    Type:
                      type: integer
                      example: 1
        400:
          description: "Missing or invalid query parameter"
        500:
          description: "Internal Server Error"
  /api/getAllUsers:
    get:
      summary: Get All Users
      description: Returns a list of all users from the system.
      tags:
        - User
      produces:
        - application/json
      responses:
        200:
          description: List of users fetched successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: array
                items:
                  type: object
                  properties:
                    UserId:
                      type: integer
                      example: 1
                    UserName:
                      type: string
                      example: "john.doe"
                    Email:
                      type: string
                      example: "john.doe@example.com"
                    Role:
                      type: string
                      example: "Admin"
        500:
          description: Internal Server Error
  /api/getStageCount:
    get:
      summary: Get Maintenance Stage Counts
      description: Returns the count of assets for each maintenance stage by joining MaintenanceStages and AssetItem tables.
      tags:
        - Filter
      responses:
        '200':
          description: Successful response with stage count data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    StageOrder:
                      type: integer
                      example: 1
                    StageName:
                      type: string
                      example: "Wash-in"
                    RecordCount:
                      type: integer
                      example: 10
        '500':
          description: Internal server error
  /api/updateFilter:
    post:
      summary: Update Filter Details
      description: Updates a filter record in the AssetItem table based on the provided ID and new field values.
      tags:
        - Filter
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              Id:
                type: integer
                example: 1
              AHUId:
                type: string
                example: "2"
              AssetType:
                type: string
                example: "2"
              Manufacturer:
                type: string
                example: "Blue Star Pvt Ltd"
              InstalledOn:
                type: string
                format: date
                example: "2024-06-15"
              Location:
                type: string
                example: "2"
              Dimensions:
                type: string
                example: "24x12x2"
              MicronRating:
                type: string
                example: "10 Micron"
              CleaningLimit:
                type: string
                example: "5 cleanings"
              ValidOperationLife:
                type: string
                example: "365"
              Specifications:
                type: string
                example: "High-efficiency particulate air filter for cleanroom application."
              updatedby:
                type: integer
                example: 1
      responses:
        200:
          description: Filter details updated successfully
        400:
          description: Bad request (missing or invalid data)
        404:
          description: Filter not found
        500:
          description: Internal server error
  /api/AddAHU:
    post:
      summary: Add New AHU Asset
      description: Inserts a new Air Handling Unit (AHU) record into the pereco_HostAsset table.
      tags:
        - AHU
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              Code:
                type: string
                example: "AHU-002"
              Description:
                type: string
                example: "Air Handler for Server Room"
              Location:
                type: integer
                example: 1
              Department:
                type: string
                example: "IT"
              Manufacturer:
                type: string
                example: "Voltas"
              ModelNo:
                type: string
                example: "VRF-200X"
              Capacity:
                type: integer
                example: 2000
              Sparescount:
                type: integer
                example: 4
              Remarks:
                type: string
                example: "New installation for server cooling"
              CreatedBy:
                type: integer
                example: 4
      responses:
        200:
          description: AHU asset added successfully
        400:
          description: Bad request (missing or invalid data)
        500:
          description: Internal server error
  /api/updateAHU:
    post:
      summary: "Update AHU Asset"
      description: "Updates an existing AHU record in the pereco_HostAsset table based on ID."
      tags:
        - AHU
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
              Code:
                type: string
                example: "AHU-002"
              Description:
                type: string
                example: "Air Handler for Server Room"
              Location:
                type: integer
                example: 1
              Department:
                type: string
                example: "IT"
              Manufacturer:
                type: string
                example: "Voltas"
              ModelNo:
                type: string
                example: "VRF-200X"
              Capacity:
                type: integer
                example: 2000
              Sparescount:
                type: integer
                example: 4
              Remarks:
                type: string
                example: "Updated remarks for maintenance"
              Updatedby:
                type: integer
                example: 101
      responses:
        200:
          description: "AHU asset updated successfully"
        400:
          description: "Bad request"
        404:
          description: "AHU asset not found"
        500:
          description: "Internal server error"
  /api/getAHUList:
    get:
      summary: Get AHU List
      description: Retrieves a list of Air Handling Units (AHUs). If `location` is 0, all AHUs are returned.
      tags:
        - AHU
      parameters:
        - name: location
          in: query
          description: Location ID to filter AHUs (0 returns all)
          required: false
          type: string
          example: "0"
      responses:
        200:
          description: List of AHU assets
          schema:
            type: array
            items:
              type: object
              properties:
                ID:
                  type: integer
                  example: 1
                Code:
                  type: string
                  example: "AHU-002"
                Description:
                  type: string
                  example: "Air Handler for Server Room"
                Location:
                  type: integer
                  example: 1
                Department:
                  type: string
                  example: "IT"
                Manufacturer:
                  type: string
                  example: "Voltas"
                ModelNo:
                  type: string
                  example: "VRF-200X"
                Capacity:
                  type: integer
                  example: 2000
                Sparescount:
                  type: integer
                  example: 4
                Remarks:
                  type: string
                  example: "Installed in 2024"
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/updateAHUstatus:
    post:
      summary: Delete AHU Asset
      description: Deletes an existing Air Handling Unit (AHU) record based on the provided ID.
      tags:
        - AHU
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
              IsActive:
                type: integer
                example: 0

      responses:
        200:
          description: AHU asset deleted successfully
        400:
          description: Bad request (missing or invalid ID)
        404:
          description: AHU asset not found
        500:
          description: Internal server error
  /api/getAssetType:
    get:
      summary: Get Asset Types
      description: Retrieves a list of all asset types from the AssetTypeMaster table.
      tags:
        - AssetType
      responses:
        200:
          description: List of asset types
          schema:
            type: array
            items:
              type: object
              properties:
                Id:
                  type: integer
                  example: 1
                AssetType:
                  type: string
                  example: "Carbon Filters"
                Note:
                  type: string
                  example: "remove gases and odors"
                IsActive:
                  type: integer
                  example: 1
                CreatedBy:
                  type: integer
                  example: 1
                CreatedOn:
                  type: string
                  format: date-time
                  example: "2025-06-03T15:34:34.570Z"
        500:
          description: Internal server error
  /api/AddAssetType:
    post:
      summary: Add Asset Type
      description: Inserts a new asset type into the pereco_AssetType table.
      tags:
        - AssetType
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              AssetType:
                type: string
                example: "Carbon Filters"
              Note:
                type: string
                example: "Removes gases and odors"
              CreatedBy:
                type: integer
                example: 1
      responses:
        200:
          description: Asset type added successfully
        400:
          description: Bad request
        500:
          description: Internal server error
  /api/updateAssetType:
    post:
      summary: Update Asset Type
      description: Updates an existing asset type in the pereco_AssetType table.
      tags:
        - AssetType
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
              AssetType:
                type: string
                example: "Carbon Filters"
              Note:
                type: string
                example: "Updated note"
              Updatedby:
                type: integer
                example: 2
      responses:
        200:
          description: Asset type updated successfully
        400:
          description: Bad request
        404:
          description: Asset type not found
        500:
          description: Internal server error
  /api/updateAssetTypestatus:
    post:
      summary: Delete Asset Type (Soft Delete)
      description: Soft-deletes an asset type by setting IsActive = 0.
      tags:
        - AssetType
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
              Updatedby:
                type: integer
                example: 2
              IsActive:
                type: integer
                example: 0
      responses:
        200:
          description: Asset type deleted (soft delete) successfully
        400:
          description: Bad request
        404:
          description: Asset type not found
        500:
          description: Internal server error
  /api/getMaintenanceStages:
    get:
      summary: Get Maintenance Stages
      description: Retrieves all maintenance stages ordered by `StageOrder`.
      tags:
        - MaintenanceStages
      responses:
        200:
          description: List of maintenance stages
          schema:
            type: array
            items:
              type: object
              properties:
                Id:
                  type: integer
                  example: 1
                StageName:
                  type: string
                  example: "New"
                Description:
                  type: string
                  example: "Initial Stage"
                IsOrder:
                  type: integer
                  example: 0
                StageOrder:
                  type: integer
                  example: 0
                IsActive:
                  type: integer
                  example: 1
                CreatedOn:
                  type: string
                  format: date-time
                  example: "2025-07-05T03:08:34.360Z"
                Updatedby:
                  type: integer
                  example: null
                UpdatedOn:
                  type: string
                  format: date-time
                  example: null
        500:
          description: Internal server error

  /api/addMaintenanceStages:
    post:
      summary: Add Maintenance Stage
      description: Inserts a new maintenance stage into the StageMaster table.
      tags:
        - MaintenanceStages
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              StageName:
                type: string
                example: "Inspection"
              Description:
                type: string
                example: "Stage for initial inspection"
              IsOrder:
                type: integer
                example: 1
              StageOrder:
                type: integer
                example: 2
              Createdby:
                type: integer
                example: 101
      responses:
        200:
          description: Maintenance stage added successfully
        400:
          description: Bad request
        500:
          description: Internal server error

  /api/updateMaintenanceStages:
    post:
      summary: Update Maintenance Stage
      description: Updates an existing maintenance stage.
      tags:
        - MaintenanceStages
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              Id:
                type: integer
                example: 1
              StageName:
                type: string
                example: "Updated Stage Name"
              Description:
                type: string
                example: "Updated description"
              IsOrder:
                type: integer
                example: 1
              StageOrder:
                type: integer
                example: 3
              Updatedby:
                type: integer
                example: 101
      responses:
        200:
          description: Maintenance stage updated successfully
        400:
          description: Bad request
        404:
          description: Stage not found
        500:
          description: Internal server error

  /api/updateMaintenanceStagesstatus:
    post:
      summary: Delete Maintenance Stage (Soft Delete)
      description: Marks a maintenance stage as inactive (IsActive = 0).
      tags:
        - MaintenanceStages
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              Id:
                type: integer
                example: 1
              Updatedby:
                type: integer
                example: 101
              IsActive:
                type: integer
                example: 0
      responses:
        200:
          description: Maintenance stage deleted (soft delete)
        400:
          description: Bad request
        404:
          description: Stage not found
        500:
          description: Internal server error
  /api/getlocations:
    get:
      summary: Get getlocations List
      description: Retrieves all active blocks from the Block table.
      tags:
        - Block
      responses:
        200:
          description: List of blocks
          schema:
            type: array
            items:
              type: object
              properties:
                BlockId:
                  type: integer
                  example: 1
                BlockName:
                  type: string
                  example: "CleanRoom"
                Description:
                  type: string
                  example: "CleanRoom"
                CreateBy:
                  type: integer
                  example: 1001
                CreatedDate:
                  type: string
                  format: date-time
                  example: "2025-07-05T02:01:33.717Z"
                UpdatedBy:
                  type: integer
                  example: null
                UpdateOn:
                  type: string
                  format: date-time
                  example: null
                IsActive:
                  type: integer
                  example: 1
        500:
          description: Internal server error

  /api/addlocations:
    post:
      summary: Add Block
      description: Inserts a new block record into the Block table.
      tags:
        - Block
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              BlockName:
                type: string
                example: "NewBlock"
              Description:
                type: string
                example: "This is a new block"
              CreateBy:
                type: integer
                example: 1001
      responses:
        200:
          description: Block added successfully
        400:
          description: Bad request
        500:
          description: Internal server error

  /api/editlocations:
    post:
      summary: Update Block
      description: Updates an existing block record.
      tags:
        - Block
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              BlockId:
                type: integer
                example: 1
              BlockName:
                type: string
                example: "UpdatedBlock"
              Description:
                type: string
                example: "Updated description"
              UpdatedBy:
                type: integer
                example: 2002
      responses:
        200:
          description: Block updated successfully
        400:
          description: Bad request
        404:
          description: Block not found
        500:
          description: Internal server error

  /api/updatelocationsstatus:
    post:
      summary: Delete Block (Soft Delete)
      description: Marks a block as inactive (IsActive = 0).
      tags:
        - Block
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              BlockId:
                type: integer
                example: 1
              UpdatedBy:
                type: integer
                example: 2002
              IsActive:
                type: integer
                example: 0
      responses:
        200:
          description: Block deleted successfully (soft delete)
        400:
          description: Bad request
        404:
          description: Block not found
        500:
          description: Internal server error
